name: Deploy to Server

on:
  push:
    branches:
      - deploy

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Project Files
        uses: actions/checkout@v3

      - name: Configure SSH Access
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set VERSION and Create Tag
        run: |
          VERSION=$(date + '%Y%m%d%H%M%S')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}
          git config --global user.name "${{ secrets.GIT_USER_NAME }}
          
          git tag -a "v${VERSION}" -m "Release version ${VERSION}"
          git push origin "v${VERSION}"

      - name: Upload Project to Server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}${{ secrets.SSH_HOST }} << 'EOF'
            mkdir -p /home/${{ secrets.SSH_USER }}/watchlist-bot
          EOF
          
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r ./* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/watchlist-bot
          
      - name: Deploy Application with Docker Compose
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ServerAliveInterval=60 -o ServerAliveCountMax=5 ${{ secrets.SSH_USER }}${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/${{ secrets.SSH_USER }}/watchlist-bot
            
            # Setting a unique project name
            export COMPOSE_PROJECT_NAME=watchlist-api
          
            export VERSION=${{ env.VERSION }}
            export ENVIRONMENT=${{ secrets.ENVIRONMENT }}
            export API_HOST=${{ secrets.APP_ENV }}  
            export API_SECRET=${{  }}
            export BOT_TOKEN=${{ secrets.BOT_TOKEN }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}  
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}  
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}  
            export POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            export POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            export KINOPOISK_API_TOKEN=${{ secrets.KINOPOISK_API_TOKEN }}
          
            if [[ "${{ secrets.FULL_REBUILD }}" == "true" ]]; then
              docker-compose down --rmi all
              docker-compose build --no-cache
            else
              docker-compose build
            fi
          
            docker-compose up -d
          EOF
