package admin

import (
	"fmt"
	"github.com/k4sper1love/watchlist-bot/internal/builders/keyboards"
	"github.com/k4sper1love/watchlist-bot/internal/database/postgres"
	"github.com/k4sper1love/watchlist-bot/internal/handlers/general"
	"github.com/k4sper1love/watchlist-bot/internal/handlers/states"
	"github.com/k4sper1love/watchlist-bot/internal/models"
	"github.com/k4sper1love/watchlist-bot/internal/utils"
	"log"
	"strconv"
	"strings"
)

var adminButtons = []keyboards.Button{
	{"–£–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–∞—Ç–µ–ª–µ–π", states.CallbackAdminSelectUserCount},
	{"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", states.CallbackAdminSelectBroadcastMessage},
	{"–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–¥–±–µ–∫–æ–≤", states.CallbackAdminSelectFeedback},
	{"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", states.CallbackAdminSelectUsers},
}

func HandleAdminCommand(app models.App, session *models.Session) {
	msg := "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"

	keyboard := keyboards.NewKeyboard().
		AddButtons(adminButtons...).
		AddBack(states.CallbackAdminSelectBack).
		Build()

	app.SendMessage(msg, keyboard)
}

func HandleAdminButtons(app models.App, session *models.Session) {
	callback := utils.ParseCallback(app.Upd)
	command := utils.ParseMessageCommand(app.Upd)
	switch {
	case callback == states.CallbackAdminSelectBack:
		general.HandleMenuCommand(app, session)

	case callback == states.CallbackAdminSelectBackPanel:
		HandleAdminCommand(app, session)

	case callback == states.CallbackAdminSelectUserCount:
		handleAdminUserCount(app, session)

	case callback == states.CallbackAdminSelectBroadcastMessage:
		handleAdminBroadcastMessage(app, session)

	case callback == states.CallbackAdminSelectFeedback:
		handleAdminFeedback(app, session)

	case callback == states.CallbackAdminSelectUsers:
		handleAdminUsers(app, session)

	case strings.HasPrefix(command, "delete_feedback_"):
		handleDeleteFeedback(app, session)

	case strings.HasPrefix(command, "ban_"):
		handleBanUser(app, session)

	case strings.HasPrefix(command, "unban_"):
		handleUnbanUser(app, session)
	}

}

func HandleAdminProcess(app models.App, session *models.Session) {
	if utils.IsCancel(app.Upd) {
		HandleAdminCommand(app, session)
		return
	}

	switch session.State {
	case states.ProcessAdminAwaitingBroadcastMessageText:
		parseAdminBroadcastMessageText(app, session)
	}
}

func handleAdminUserCount(app models.App, session *models.Session) {
	count, err := postgres.GetUserCounts()
	if err != nil {
		app.SendMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É", nil)
		return
	}

	app.SendMessage(fmt.Sprintf("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ –±–æ—Ç–∞: %d", count), nil)
	HandleAdminCommand(app, session)
}

func handleAdminBroadcastMessage(app models.App, session *models.Session) {
	count, err := postgres.GetUserCounts()
	if err != nil {
		app.SendMessage("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", nil)
		return
	}

	msg := fmt.Sprintf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: %d\n", count)
	msg += "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–≤–∞–Ω–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"

	keyboard := keyboards.NewKeyboard().AddCancel().Build()

	app.SendMessage(msg, keyboard)

	session.SetState(states.ProcessAdminAwaitingBroadcastMessageText)
}

func parseAdminBroadcastMessageText(app models.App, session *models.Session) {
	msg := utils.ParseMessageString(app.Upd)

	telegramIDs, err := postgres.GetAllTelegramID()
	if err != nil {
		app.SendMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IDs –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", nil)
		return
	}

	app.SendBroadcastMessage(telegramIDs, msg, nil)

	session.ClearState()

	HandleAdminCommand(app, session)
}

func handleAdminFeedback(app models.App, session *models.Session) {
	keyboard := keyboards.NewKeyboard().AddBack(states.CallbackAdminSelectBackPanel).Build()

	feedbacks, err := postgres.FetchAllFeedbacks()
	if err != nil || len(feedbacks) == 0 {
		app.SendMessage("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∏–¥–±–µ–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", keyboard)
		return
	}

	const maxMessageLength = 4000

	msg := "üìÑ <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–¥–±–µ–∫–æ–≤:</b>\n\n"

	for _, feedback := range feedbacks {
		entry := fmt.Sprintf(
			"üÜî ID: %d\n"+
				"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: tg://user?id=%d\n"+
				"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n"+
				"üí¨ %s\n"+
				"üìÖ %s\n\n"+
				"üóëÔ∏è /delete_feedback_%d\n"+
				"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n",
			feedback.ID, feedback.TelegramID, feedback.Category, feedback.Message,
			feedback.CreatedAt.Format("02.01.2006 15:04"), feedback.ID,
		)

		if len(msg)+len(entry) > maxMessageLength {
			app.SendMessage(msg, keyboard)
			msg = ""
		}

		msg += entry
	}

	if len(msg) > 0 {
		app.SendMessage(msg, keyboard)
	}
}

func handleDeleteFeedback(app models.App, session *models.Session) {
	feedbackID, err := parseFeedbackID(app)
	if err != nil {
		app.SendMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —Ñ–∏–¥–±–µ–∫–∞.", nil)
		return
	}

	err = postgres.DeleteFeedbackByID(feedbackID)
	if err != nil {
		app.SendMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∏–¥–±–µ–∫.", nil)
		return
	}

	app.SendMessage("‚úÖ –§–∏–¥–±–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", nil)

	handleAdminFeedback(app, session)
}

func handleAdminUsers(app models.App, session *models.Session) {
	keyboard := keyboards.NewKeyboard().AddBack(states.CallbackAdminSelectBackPanel).Build()

	users, err := postgres.FetchAllUsers()
	if err != nil || len(users) == 0 {
		app.SendMessage("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", keyboard)
		return
	}

	const maxMessageLength = 4000

	msg := "üìÑ <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"

	for _, user := range users {
		entry := fmt.Sprintf(
			"üÜî Telegram ID: tg://user?id=%d\n"+
				"üë§ <b>–ê–¥–º–∏–Ω:</b> %s\n"+
				"üîê <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</b> %s\n"+
				"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> %s\n",
			user.TelegramID,
			boolToString(user.IsAdmin),
			boolToString(user.IsBanned),
			user.CreatedAt.Format("02.01.2006 15:04"),
		)

		if !user.IsAdmin && !user.IsBanned {
			entry += fmt.Sprintf("üõë /ban_%d\n", user.TelegramID)
		}

		if user.IsBanned {
			entry += fmt.Sprintf("üü¢ /unban_%d\n", user.TelegramID)
		}

		entry += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

		if len(msg)+len(entry) > maxMessageLength {
			app.SendMessage(msg, keyboard)
			msg = ""
		}

		msg += entry
	}

	if len(msg) > 0 {
		app.SendMessage(msg, keyboard)
	}
}

func handleBanUser(app models.App, session *models.Session) {
	telegramID, err := parseBanTelegramID(app)
	if err != nil {
		app.SendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.", nil)
		return
	}

	err = postgres.BanUser(telegramID)
	if err != nil {
		app.SendMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", nil)
		return
	}

	app.SendMessage(fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", telegramID), nil)

	handleAdminUsers(app, session)
}

func handleUnbanUser(app models.App, session *models.Session) {
	telegramID, err := parseUnbanTelegramID(app)
	if err != nil {
		app.SendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.", nil)
		return
	}

	err = postgres.UnbanUser(telegramID)
	if err != nil {
		app.SendMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", nil)
		return
	}

	app.SendMessage(fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", telegramID), nil)

	handleAdminUsers(app, session)
}

func parseFeedbackID(app models.App) (int, error) {
	command := utils.ParseMessageCommand(app.Upd)
	idStr := strings.TrimPrefix(command, "delete_feedback_")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		log.Printf("error parsing feedback ID: %v", err)
		return -1, err
	}

	return id, nil
}

func parseBanTelegramID(app models.App) (int, error) {
	command := utils.ParseMessageCommand(app.Upd)
	idStr := strings.TrimPrefix(command, "ban_")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		log.Printf("error parsing ban telegram ID: %v", err)
		return -1, err
	}

	return id, nil
}

func parseUnbanTelegramID(app models.App) (int, error) {
	command := utils.ParseMessageCommand(app.Upd)
	idStr := strings.TrimPrefix(command, "unban_")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		log.Printf("error parsing unban telegram ID: %v", err)
		return -1, err
	}

	return id, nil
}

func boolToString(value bool) string {
	if value {
		return "‚úÖ"
	}
	return "‚ùå"
}
